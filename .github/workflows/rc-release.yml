name: Release Candidate

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

jobs:
  create-rc:
    runs-on: ubuntu-latest
    # Only run if PR is from develop branch
    if: github.event.pull_request.head.ref == 'develop'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Check out the PR branch (develop)
          ref: ${{ github.event.pull_request.head.ref }}
          
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          
      - name: Check if RC release needed
        id: check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Check if current version is already tagged
          if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
            echo "⚠️ Version v$CURRENT_VERSION is already tagged. No release needed."
            echo "create_release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version v$CURRENT_VERSION is not yet tagged. Creating release."
            echo "create_release=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Read version from package.json
        if: steps.check.outputs.create_release == 'true'
        id: read_version
        run: |
          # Read the version that was already set locally
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Using version from package.json: $CURRENT_VERSION"
          
      - name: Set up Docker Buildx
        if: steps.check.outputs.create_release == 'true'
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        if: steps.check.outputs.create_release == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker images
        if: steps.check.outputs.create_release == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            rcourtman/pulse:v${{ steps.read_version.outputs.version }}
            rcourtman/pulse:rc
          
      - name: Set up Node.js
        if: steps.check.outputs.create_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build CSS
        if: steps.check.outputs.create_release == 'true'
        run: |
          echo "Installing dependencies for CSS build..."
          npm install
          echo "Building CSS with Tailwind..."
          npm run build:css
          
      - name: Create Release Archive
        if: steps.check.outputs.create_release == 'true'
        run: |
          echo "📦 Building RC release tarball..."
          
          # Create staging directory for proper release structure
          RC_VERSION="${{ steps.read_version.outputs.version }}"
          RELEASE_DIR_NAME="pulse-v$RC_VERSION"
          STAGING_PARENT_DIR="pulse-rc-staging"
          STAGING_FULL_PATH="$STAGING_PARENT_DIR/$RELEASE_DIR_NAME"
          
          # Cleanup and create staging
          rm -rf "$STAGING_PARENT_DIR"
          mkdir -p "$STAGING_FULL_PATH"
          
          echo "Copying application files to $STAGING_FULL_PATH..."
          
          # Copy server files (excluding tests) - using rsync for better handling
          rsync -av --progress server/ "$STAGING_FULL_PATH/server/" --exclude 'tests/' || cp -r server "$STAGING_FULL_PATH/"
          
          # Copy source files (including built CSS and public assets)
          mkdir -p "$STAGING_FULL_PATH/src"
          rsync -av --progress src/public/ "$STAGING_FULL_PATH/src/public/" || cp -r src/public "$STAGING_FULL_PATH/src/"
          cp src/index.css "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/index.css not found"
          cp src/tailwind.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/tailwind.config.js not found"
          cp src/postcss.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/postcss.config.js not found"
          
          # Copy root files
          cp package.json "$STAGING_FULL_PATH/"
          cp package-lock.json "$STAGING_FULL_PATH/"
          [ -f README.md ] && cp README.md "$STAGING_FULL_PATH/"
          [ -f LICENSE ] && cp LICENSE "$STAGING_FULL_PATH/"
          [ -f CHANGELOG.md ] && cp CHANGELOG.md "$STAGING_FULL_PATH/"
          [ -f docker-compose.yml ] && cp docker-compose.yml "$STAGING_FULL_PATH/"
          [ -f Dockerfile ] && cp Dockerfile "$STAGING_FULL_PATH/"
          
          # Copy scripts and docs
          echo "Copying scripts directory..."
          mkdir -p "$STAGING_FULL_PATH/scripts/"
          if [ -f "scripts/install-pulse.sh" ]; then
            cp scripts/install-pulse.sh "$STAGING_FULL_PATH/scripts/"
            echo "✓ Copied install-pulse.sh"
          else
            echo "⚠️ Warning: scripts/install-pulse.sh not found"
          fi
          
          if [ -d "docs" ]; then
            rsync -av --progress docs/ "$STAGING_FULL_PATH/docs/" || cp -r docs "$STAGING_FULL_PATH/"
          fi
          
          # Install production dependencies in staging
          echo "Installing production dependencies..."
          (cd "$STAGING_FULL_PATH" && npm install --omit=dev --ignore-scripts)
          
          # Verify essential files
          echo "Verifying essential files..."
          if [ ! -f "$STAGING_FULL_PATH/package.json" ]; then
            echo "Error: Missing package.json"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/server/index.js" ]; then
            echo "Error: Missing server/index.js"
            exit 1
          fi
          if [ ! -d "$STAGING_FULL_PATH/node_modules" ]; then
            echo "Error: Missing node_modules"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/scripts/install-pulse.sh" ]; then
            echo "Error: Missing scripts/install-pulse.sh"
            exit 1
          fi
          echo "✓ All essential files verified"
          
          # Create tarball with proper directory structure
          echo "Creating tarball..."
          (cd "$STAGING_PARENT_DIR" && tar -czf "../pulse-v$RC_VERSION.tar.gz" "$RELEASE_DIR_NAME")
          
          # Cleanup staging
          rm -rf "$STAGING_PARENT_DIR"
          
          # Show tarball info
          ls -lh "pulse-v$RC_VERSION.tar.gz"
          echo "✅ RC release tarball created with production dependencies"
          
      - name: Generate Release Body with Changelog
        if: steps.check.outputs.create_release == 'true'
        id: release_body
        run: |
          echo "Generating release body with detailed changelog..."
          
          # Get the PR body
          PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q .body)
          
          # Start building the release body
          cat > release_body.md << 'HEADER'
          ## 🧪 Release Candidate v${{ steps.read_version.outputs.version }}
          
          This is a release candidate for testing. Please report any issues you find.
          
          HEADER
          
          # Generate detailed changelog using the same logic as stable releases
          echo "📝 Generating detailed changelog from commits..."
          
          # For RC releases, compare against the previous RC or last stable
          LATEST_RC=$(git tag -l "v*-rc*" | sort -V | tail -1)
          if [ -n "$LATEST_RC" ]; then
            PREV_TAG="$LATEST_RC"  # Use last RC for incremental changelog
            echo "📊 Using previous RC tag: $PREV_TAG"
          else
            PREV_TAG=$(git tag -l "v*" | grep -v "rc\|alpha\|beta" | sort -V | tail -1)  # Use last stable
            echo "📊 No previous RC found, using last stable: $PREV_TAG"
          fi
          
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG="v0.0.0"
          fi
          
          echo "📊 Analyzing commits from $PREV_TAG to HEAD"
          
          # Export variables for the changelog script
          export PREV_TAG="$PREV_TAG"
          export NEW_VERSION="${{ steps.read_version.outputs.version }}"
          export BUMP_TYPE="rc"
          export REASONING="Release candidate for testing"
          
          # Generate detailed changelog using the same script as stable releases
          if [ -f scripts/generate-changelog.js ]; then
            echo "🔧 Using changelog script for detailed RC changelog"
            node scripts/generate-changelog.js
            
            # Extract just the "What's Changed" section for the release body
            if [ -f CHANGELOG.md ]; then
              echo "---" >> release_body.md
              echo "" >> release_body.md
              # Add the changelog content (skip installation instructions for RC)
              sed -n '/## What'\''s Changed/,/## 🚀 Installation & Update Instructions/{/## 🚀 Installation & Update Instructions/!p;}' CHANGELOG.md >> release_body.md
              echo "---" >> release_body.md
            fi
          else
            echo "⚠️ Changelog script not found, using basic commit analysis"
            
            # Fallback: Basic commit analysis
            echo "---" >> release_body.md
            echo "" >> release_body.md
            echo "## What's Changed" >> release_body.md
            echo "" >> release_body.md
            
            # Get commits since last stable release
            git log $PREV_TAG..HEAD --oneline --no-merges | grep -v "chore: bump version\|🤖 Generated with\|merge pull request" | head -20 | while read commit; do
              echo "- $commit" >> release_body.md
            done
            echo "" >> release_body.md
            echo "---" >> release_body.md
          fi
          
          # Skip PR summary extraction since changelog covers all changes
          
          # Add the standard update instructions
          cat >> release_body.md << 'FOOTER'
          
          ### 🔄 **Existing Users - Update to RC**
          
          #### 🖥️ **Web Interface Update (Available from v3.27.2+)**
          **✨ Switch to RC channel for testing:**
          1. Open your Pulse web interface
          2. Go to **Settings** → **System** tab → **Software Updates**
          3. Select **"RC"** channel to receive release candidates
          4. Click **"Check for Updates"** 
          5. Click **"Apply Update"** to install this RC version
          6. The interface will automatically refresh after update
          
          > **Note**: You can switch back to "Stable" channel anytime
          
          #### 🛠️ **Script-Based Update**
          **For LXC, VMs, and regular installations:**
          ```bash
          # Update to this specific RC version
          cd /opt/pulse/scripts
          ./install-pulse.sh --update --version v${{ steps.read_version.outputs.version }}
          ```
          
          #### 🐳 **Docker Update**
          ```bash
          # Pull this specific RC version
          docker pull rcourtman/pulse:v${{ steps.read_version.outputs.version }}
          
          # Or use the rolling RC tag (always latest RC)
          docker pull rcourtman/pulse:rc
          
          # Update with docker-compose
          docker compose down && docker compose pull && docker compose up -d
          
          # Or update manually
          docker stop pulse && docker rm pulse
          docker run -d --name pulse -p 7655:7655 -v pulse-config:/app/config rcourtman/pulse:rc
          ```
          
          ### 📥 **New Users - Fresh RC Installation**
          
          #### **Automated Installer**
          ```bash
          # Install this specific RC version
          curl -sL https://raw.githubusercontent.com/rcourtman/Pulse/main/scripts/install-pulse.sh | bash -s -- --version v${{ steps.read_version.outputs.version }}
          ```
          
          #### **Manual Download**
          ```bash
          wget https://github.com/rcourtman/Pulse/releases/download/v${{ steps.read_version.outputs.version }}/pulse-v${{ steps.read_version.outputs.version }}.tar.gz
          tar -xzf pulse-v${{ steps.read_version.outputs.version }}.tar.gz
          cd pulse-v${{ steps.read_version.outputs.version }}
          npm install --production
          npm start
          ```
          
          ### ⚠️ **Testing Notes**
          - **This is a pre-release for testing only**
          - **Not recommended for production environments**
          - Please report any issues on [GitHub Issues](https://github.com/rcourtman/Pulse/issues)
          - The `:rc` Docker tag always points to the latest RC version
          - You can easily switch between Stable and RC channels in the web interface
          FOOTER
          
          echo "Release body generated successfully!"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create RC Release
        if: steps.check.outputs.create_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.read_version.outputs.version }}
          name: v${{ steps.read_version.outputs.version }}
          draft: true
          prerelease: true
          generate_release_notes: false
          files: pulse-v${{ steps.read_version.outputs.version }}.tar.gz
          body_path: release_body.md
            
      - name: Auto-merge PR to main
        if: steps.check.outputs.create_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Auto-merging PR #${{ github.event.pull_request.number }} to main..."
          
          # Add a small delay to ensure release is fully created
          sleep 5
          
          # Merge the PR
          gh pr merge ${{ github.event.pull_request.number }} --merge --admin \
            --subject "Auto-merge: RC v${{ steps.read_version.outputs.version }} ready" \
            --body "Automatically merged after successful RC release creation"
          
          echo "✅ PR successfully merged to main"