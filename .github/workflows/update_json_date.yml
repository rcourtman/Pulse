name: Auto Update JSON-Dateien (nur neue Dateien)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-json-dates:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Git-Setup
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Finde neu hinzugefügte JSON-Dateien
      - name: Find newly added JSON files
        id: find_new_json
        run: |
          NEW_JSON_FILES=$(git log --diff-filter=A --name-only --pretty=format: -- json/*.json || true)

          if [[ -z "$NEW_JSON_FILES" ]]; then
            echo "No new JSON files found."
            echo "CHANGED=false" >> $GITHUB_ENV
          else
            echo "New JSON files detected:"
            echo "$NEW_JSON_FILES"
            echo "$NEW_JSON_FILES" > new_json_files.txt
            echo "CHANGED=true" >> $GITHUB_ENV
          fi

      # JSON-Dateien aktualisieren (nur wenn neue gefunden wurden)
      - name: Update date_created in new JSON files
        if: env.CHANGED == 'true'
        run: |
          TODAY=$(date -u +"%Y-%m-%d")
          UPDATED=false

          while read -r FILE; do
            if [[ -f "$FILE" ]]; then
              DATE_IN_JSON=$(jq -r '.date_created' "$FILE" 2>/dev/null || echo "")

              if [[ "$DATE_IN_JSON" != "$TODAY" ]]; then
                echo "Updating date_created in $FILE: $DATE_IN_JSON -> $TODAY"
                jq --arg date "$TODAY" '.date_created = $date' "$FILE" > tmp.json && mv tmp.json "$FILE"
                UPDATED=true
              fi
            fi
          done < new_json_files.txt

          if [[ "$UPDATED" == "true" ]]; then
            echo "UPDATED=true" >> $GITHUB_ENV
          else
            echo "UPDATED=false" >> $GITHUB_ENV
          fi

      # Falls Änderungen existieren: Commit und PR erstellen
      - name: Commit and create PR if changes exist
        if: env.UPDATED == 'true'
        run: |
          git add json/*.json
          git commit -m "Auto-update JSON date_created fields (new files only)"
          git checkout -b pr-update-json-dates
          git push origin pr-update-json-dates --force
          gh pr create --title "[core] Auto-update new JSON files" \
                       --body "This PR is auto-generated by a GitHub Action to update the `date_created` field in newly created JSON files." \
                       --head pr-update-json-dates \
                       --base main \
                       --label "automated pr"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      # PR automatisch approven
      - name: Approve pull request
        if: env.UPDATED == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "pr-update-json-dates" --json number --jq '.[].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr review $PR_NUMBER --approve
          fi

      # PR erneut approven, falls erforderlich
      - name: Re-approve pull request after update
        if: env.UPDATED == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "pr-update-json-dates" --json number --jq '.[].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr review $PR_NUMBER --approve
          fi

      # Falls keine Änderungen erkannt wurden
      - name: No changes detected
        if: env.UPDATED == 'false'
        run: echo "No new JSON files needed an update. Workflow completed successfully."
