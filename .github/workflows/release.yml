name: Build Docker Images and Create Release Assets

on:
  release:
    types: [published]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extract metadata
        id: meta
        run: |
          # Get the tag name from the release
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"  # Remove 'v' prefix
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Determine if this is a pre-release (RC)
          if [[ "$VERSION" == *"-rc"* ]]; then
            echo "is_rc=true" >> $GITHUB_OUTPUT
            echo "latest_tag=rc" >> $GITHUB_OUTPUT
          else
            echo "is_rc=false" >> $GITHUB_OUTPUT
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build CSS
        run: npm run build:css

      - name: Build release tarball
        env:
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          echo "üì¶ Building release tarball for v$VERSION..."
          
          # Create staging directory for proper release structure
          RELEASE_DIR_NAME="pulse-v$VERSION"
          STAGING_PARENT_DIR="pulse-release-staging"
          STAGING_FULL_PATH="$STAGING_PARENT_DIR/$RELEASE_DIR_NAME"
          
          # Cleanup and create staging
          rm -rf "$STAGING_PARENT_DIR"
          mkdir -p "$STAGING_FULL_PATH"
          
          echo "Copying application files to $STAGING_FULL_PATH..."
          
          # Copy server files (excluding tests)
          rsync -av server/ "$STAGING_FULL_PATH/server/" \
            --exclude 'tests/' \
            --exclude '__tests__/' \
            --exclude '*.test.js'
          
          # Copy source files (including built CSS and public assets)
          mkdir -p "$STAGING_FULL_PATH/src"
          rsync -av src/public/ "$STAGING_FULL_PATH/src/public/"
          cp src/index.css "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/index.css not found"
          cp src/tailwind.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/tailwind.config.js not found"
          cp src/postcss.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/postcss.config.js not found"
          
          # Copy root files
          cp package.json "$STAGING_FULL_PATH/"
          cp package-lock.json "$STAGING_FULL_PATH/"
          cp README.md "$STAGING_FULL_PATH/"
          cp LICENSE "$STAGING_FULL_PATH/"
          
          # Create a simple changelog if one doesn't exist
          if [ -f "CHANGELOG_v${VERSION}.md" ]; then
            cp "CHANGELOG_v${VERSION}.md" "$STAGING_FULL_PATH/CHANGELOG.md"
          else
            echo "# Release v$VERSION" > "$STAGING_FULL_PATH/CHANGELOG.md"
            echo "" >> "$STAGING_FULL_PATH/CHANGELOG.md"
            echo "See https://github.com/rcourtman/Pulse/releases/tag/v$VERSION for details." >> "$STAGING_FULL_PATH/CHANGELOG.md"
          fi
          
          # Copy scripts and docs
          echo "Copying scripts directory..."
          mkdir -p "$STAGING_FULL_PATH/scripts/"
          if [ -f "scripts/install-pulse.sh" ]; then
            cp scripts/install-pulse.sh "$STAGING_FULL_PATH/scripts/"
            echo "‚úì Copied install-pulse.sh"
          else
            echo "‚ö†Ô∏è Warning: scripts/install-pulse.sh not found"
          fi
          
          if [ -d "docs" ]; then
            rsync -av docs/ "$STAGING_FULL_PATH/docs/"
          fi
          
          # Install production dependencies in staging
          echo "Installing production dependencies..."
          (cd "$STAGING_FULL_PATH" && npm install --omit=dev --ignore-scripts)
          
          # Verify essential files
          echo "Verifying essential files..."
          if [ ! -f "$STAGING_FULL_PATH/package.json" ]; then
            echo "Error: Missing package.json"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/server/index.js" ]; then
            echo "Error: Missing server/index.js"
            exit 1
          fi
          if [ ! -d "$STAGING_FULL_PATH/node_modules" ]; then
            echo "Error: Missing node_modules"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/scripts/install-pulse.sh" ]; then
            echo "Error: Missing scripts/install-pulse.sh"
            exit 1
          fi
          echo "‚úì All essential files verified"
          
          # Create tarball
          echo "Creating tarball..."
          (cd "$STAGING_PARENT_DIR" && tar -czf "../pulse-v$VERSION.tar.gz" "$RELEASE_DIR_NAME")
          
          # Cleanup staging
          rm -rf "$STAGING_PARENT_DIR"
          
          # Show tarball info
          ls -lh "pulse-v$VERSION.tar.gz"
          echo "‚úÖ Release tarball created with production dependencies"

      - name: Upload tarball to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          echo "üì§ Uploading tarball to release..."
          gh release upload "${{ github.event.release.tag_name }}" "pulse-v$VERSION.tar.gz" --clobber
          echo "‚úÖ Tarball uploaded successfully"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            rcourtman/pulse:${{ steps.meta.outputs.tag }}
            rcourtman/pulse:${{ steps.meta.outputs.latest_tag }}

      - name: Update release with Docker info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add Docker pull commands to release body
          CURRENT_BODY=$(gh release view ${{ github.event.release.tag_name }} --json body -q .body)
          
          DOCKER_INFO="

## üê≥ Docker Images

Docker images are now available:

\`\`\`bash
# Pull this specific version
docker pull rcourtman/pulse:${{ steps.meta.outputs.tag }}

# Pull latest ${{ steps.meta.outputs.is_rc == 'true' && 'RC' || 'stable' }} version
docker pull rcourtman/pulse:${{ steps.meta.outputs.latest_tag }}
\`\`\`"
          
          # Only add if not already present
          if ! echo "$CURRENT_BODY" | grep -q "Docker Images"; then
            gh release edit ${{ github.event.release.tag_name }} --notes "$CURRENT_BODY$DOCKER_INFO"
          fi