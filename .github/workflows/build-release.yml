name: Build Release Assets

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-release:
    # Only run when PR is merged (not just closed)
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extract version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version from package.json: $VERSION"
          
          # Determine if this is a pre-release (RC)
          if [[ "$VERSION" == *"-rc"* ]]; then
            echo "is_rc=true" >> $GITHUB_OUTPUT
            echo "latest_tag=rc" >> $GITHUB_OUTPUT
          else
            echo "is_rc=false" >> $GITHUB_OUTPUT
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Look for changelog file
        id: find-changelog
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          CHANGELOG_FILE="CHANGELOG_v${VERSION}.md"
          
          if [ -f "$CHANGELOG_FILE" ]; then
            echo "üìù Found changelog file: $CHANGELOG_FILE"
            echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
            echo "has_changelog=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No changelog file found for v$VERSION"
            echo "has_changelog=false" >> $GITHUB_OUTPUT
            
            # Create a basic changelog
            cat > CHANGELOG_TEMP.md << EOF
          ## Release v$VERSION

          This release includes all changes merged from the develop branch.

          For detailed changes, see the [commit history](https://github.com/${{ github.repository }}/compare/v${{ steps.get-version.outputs.version }}...HEAD).

          ü§ñ *Automated release*
          EOF
            echo "changelog_file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT
          fi

      - name: Build CSS
        run: npm run build:css

      - name: Build release tarball
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          echo "üì¶ Building release tarball for v$VERSION..."
          
          # Create staging directory for proper release structure
          RELEASE_DIR_NAME="pulse-v$VERSION"
          STAGING_PARENT_DIR="pulse-release-staging"
          STAGING_FULL_PATH="$STAGING_PARENT_DIR/$RELEASE_DIR_NAME"
          
          # Cleanup and create staging
          rm -rf "$STAGING_PARENT_DIR"
          mkdir -p "$STAGING_FULL_PATH"
          
          echo "Copying application files to $STAGING_FULL_PATH..."
          
          # Copy server files (excluding tests)
          rsync -av server/ "$STAGING_FULL_PATH/server/" \
            --exclude 'tests/' \
            --exclude '__tests__/' \
            --exclude '*.test.js'
          
          # Copy source files (including built CSS and public assets)
          mkdir -p "$STAGING_FULL_PATH/src"
          rsync -av src/public/ "$STAGING_FULL_PATH/src/public/"
          cp src/index.css "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/index.css not found"
          cp src/tailwind.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/tailwind.config.js not found"
          cp src/postcss.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/postcss.config.js not found"
          
          # Copy root files
          cp package.json "$STAGING_FULL_PATH/"
          cp package-lock.json "$STAGING_FULL_PATH/"
          cp README.md "$STAGING_FULL_PATH/"
          cp LICENSE "$STAGING_FULL_PATH/"
          
          # Copy the changelog
          if [ -f "${{ steps.find-changelog.outputs.changelog_file }}" ]; then
            cp "${{ steps.find-changelog.outputs.changelog_file }}" "$STAGING_FULL_PATH/CHANGELOG.md"
          fi
          
          # Copy scripts and docs
          echo "Copying scripts directory..."
          mkdir -p "$STAGING_FULL_PATH/scripts/"
          if [ -f "scripts/install-pulse.sh" ]; then
            cp scripts/install-pulse.sh "$STAGING_FULL_PATH/scripts/"
            echo "‚úì Copied install-pulse.sh"
          else
            echo "‚ö†Ô∏è Warning: scripts/install-pulse.sh not found"
          fi
          
          if [ -d "docs" ]; then
            rsync -av docs/ "$STAGING_FULL_PATH/docs/"
          fi
          
          # Install production dependencies in staging
          echo "Installing production dependencies..."
          (cd "$STAGING_FULL_PATH" && npm install --omit=dev --ignore-scripts)
          
          # Verify essential files
          echo "Verifying essential files..."
          if [ ! -f "$STAGING_FULL_PATH/package.json" ]; then
            echo "Error: Missing package.json"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/server/index.js" ]; then
            echo "Error: Missing server/index.js"
            exit 1
          fi
          if [ ! -d "$STAGING_FULL_PATH/node_modules" ]; then
            echo "Error: Missing node_modules"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/scripts/install-pulse.sh" ]; then
            echo "Error: Missing scripts/install-pulse.sh"
            exit 1
          fi
          echo "‚úì All essential files verified"
          
          # Create tarball
          echo "Creating tarball..."
          (cd "$STAGING_PARENT_DIR" && tar -czf "../pulse-v$VERSION.tar.gz" "$RELEASE_DIR_NAME")
          
          # Cleanup staging
          rm -rf "$STAGING_PARENT_DIR"
          
          # Show tarball info
          ls -lh "pulse-v$VERSION.tar.gz"
          echo "‚úÖ Release tarball created with production dependencies"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            rcourtman/pulse:v${{ steps.get-version.outputs.version }}
            rcourtman/pulse:${{ steps.get-version.outputs.latest_tag }}

      - name: Create GitHub Release (DRAFT)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          echo "üìù Creating DRAFT GitHub release..."
          
          # Determine if this is a pre-release
          PRERELEASE_FLAG=""
          if [ "${{ steps.get-version.outputs.is_rc }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          # Read the changelog content
          CHANGELOG_CONTENT=$(cat "${{ steps.find-changelog.outputs.changelog_file }}")
          
          # Add Docker info to the changelog
          DOCKER_INFO="

## üê≥ Docker Images

Docker images are now available:

\`\`\`bash
# Pull this specific version
docker pull rcourtman/pulse:v$VERSION

# Pull latest ${{ steps.get-version.outputs.is_rc == 'true' && 'RC' || 'stable' }} version
docker pull rcourtman/pulse:${{ steps.get-version.outputs.latest_tag }}
\`\`\`"
          
          # Create the release as DRAFT
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "$CHANGELOG_CONTENT$DOCKER_INFO" \
            --target main \
            $PRERELEASE_FLAG \
            --draft \
            "pulse-v$VERSION.tar.gz"
          
          echo "‚úÖ Draft release created successfully!"
          echo "üîó Review and publish at: https://github.com/${{ github.repository }}/releases"